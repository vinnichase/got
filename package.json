{
    "name": "gotjs",
    "version": "0.0.10-0",
    "description": "got is a fluent, functional, zero-dependency, in-memory JavaScript graph database. You can create data structures at any degree of complexity within your JavaScript application both in the browser and Node.js. The whole database is represented in a state object which is basically a plain JavaScript object. The state is immutable, which means that existing states are never modified directly, instead a mutation will always result in a clone of the previous state, including the updates. For that reason, got is also perfect to manage heavily complex states with pure Redux.",
    "keywords": [
        "graph database",
        "in-memory",
        "zero-dependency",
        "fluent",
        "functional",
        "redux",
        "complex"
    ],
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "scripts": {
        "start:house": "ts-node ./examples/house/homeScreen.ts",
        "build": "rimraf ./dist && tsc",
        "lint": "tslint \"src/**/*.ts\"",
        "test": "echo 'no tests'",
        "publish:prod": "yarn version --minor && yarn build && yarn publish --non-interactive && git push --follow-tags",
        "publish:patch": "yarn version --patch && yarn build && yarn publish --non-interactive && git push --follow-tags",
        "publish:pre": "npm version prerelease && yarn build && yarn publish --non-interactive && git push --follow-tags"
    },
    "dependencies": {},
    "devDependencies": {
        "@types/core-js": "2.5.0",
        "@types/node": "10.12.18",
        "@types/ramda": "0.25.48",
        "dayjs": "1.8.4",
        "gotjs": "^0.0.6",
        "rambda": "2.3.1",
        "ts-node": "8.0.1",
        "tslint": "5.12.1",
        "typescript": "3.2.4"
    },
    "repository": {
        "url": "https://github.com/vinnichase/got"
    },
    "publishConfig": {
        "registry": "https://registry.npmjs.org/"
    }
}
